// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PpnReporting.BusinessLogic;

namespace PpnReporting.Migrations
{
    [DbContext(typeof(PpnContext))]
    [Migration("20191009222528_PlatinumSpellingCorrection")]
    partial class PlatinumSpellingCorrection
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PpnReporting.BusinessLogic.Models.Horse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Breed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discipline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Horses");
                });

            modelBuilder.Entity("PpnReporting.BusinessLogic.Models.Lab", b =>
                {
                    b.Property<Guid>("LabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<double>("Aluminum")
                        .HasColumnType("float");

                    b.Property<double>("Antimony")
                        .HasColumnType("float");

                    b.Property<double>("Arsenic")
                        .HasColumnType("float");

                    b.Property<double>("Barium")
                        .HasColumnType("float");

                    b.Property<double>("Beryllium")
                        .HasColumnType("float");

                    b.Property<double>("Bismuth")
                        .HasColumnType("float");

                    b.Property<double>("Boron")
                        .HasColumnType("float");

                    b.Property<double>("Cadmium")
                        .HasColumnType("float");

                    b.Property<double>("Calcium")
                        .HasColumnType("float");

                    b.Property<double>("Chromium")
                        .HasColumnType("float");

                    b.Property<double>("Cobalt")
                        .HasColumnType("float");

                    b.Property<double>("Copper")
                        .HasColumnType("float");

                    b.Property<double>("Germanium")
                        .HasColumnType("float");

                    b.Property<Guid?>("HorseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Iodine")
                        .HasColumnType("float");

                    b.Property<double>("Iron")
                        .HasColumnType("float");

                    b.Property<DateTime>("LabDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LabNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lead")
                        .HasColumnType("float");

                    b.Property<double>("Lithium")
                        .HasColumnType("float");

                    b.Property<double>("Magnesium")
                        .HasColumnType("float");

                    b.Property<double>("Manganese")
                        .HasColumnType("float");

                    b.Property<double>("Mercury")
                        .HasColumnType("float");

                    b.Property<double>("Molybdenum")
                        .HasColumnType("float");

                    b.Property<double>("Nickel")
                        .HasColumnType("float");

                    b.Property<double>("Phosphorus")
                        .HasColumnType("float");

                    b.Property<double>("Platinum")
                        .HasColumnType("float");

                    b.Property<double>("Potassium")
                        .HasColumnType("float");

                    b.Property<double>("Rubidium")
                        .HasColumnType("float");

                    b.Property<string>("SampleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Selenium")
                        .HasColumnType("float");

                    b.Property<double>("Silver")
                        .HasColumnType("float");

                    b.Property<double>("Sodium")
                        .HasColumnType("float");

                    b.Property<double>("Strontium")
                        .HasColumnType("float");

                    b.Property<double>("Sulfur")
                        .HasColumnType("float");

                    b.Property<double>("Thallium")
                        .HasColumnType("float");

                    b.Property<double>("Thorium")
                        .HasColumnType("float");

                    b.Property<double>("Tin")
                        .HasColumnType("float");

                    b.Property<double>("Titanium")
                        .HasColumnType("float");

                    b.Property<double>("Uranium")
                        .HasColumnType("float");

                    b.Property<double>("Vanadium")
                        .HasColumnType("float");

                    b.Property<double>("Zinc")
                        .HasColumnType("float");

                    b.Property<double>("Zirconium")
                        .HasColumnType("float");

                    b.HasKey("LabId");

                    b.HasIndex("HorseId");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("PpnReporting.BusinessLogic.Models.NutrientBulletPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BulletPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutrientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NutrientBulletPoints");
                });

            modelBuilder.Entity("PpnReporting.BusinessLogic.Models.Lab", b =>
                {
                    b.HasOne("PpnReporting.BusinessLogic.Models.Horse", "Horse")
                        .WithMany()
                        .HasForeignKey("HorseId");
                });
#pragma warning restore 612, 618
        }
    }
}
